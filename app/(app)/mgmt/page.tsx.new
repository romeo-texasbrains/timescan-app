import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import LoadingSpinner from '@/components/LoadingSpinner'
import { Suspense } from 'react'
import ClientWrapper from './ClientWrapper'

// Type for employee status
type EmployeeStatus = {
  id: string;
  name: string;
  status: 'signed_in' | 'signed_out' | 'on_break';
  lastActivity: string;
  lastActivityTime: string;
};

// Helper function to get all the data needed for the manager dashboard
async function getManagerDashboardData(supabase, user, managerProfile) {
  // Get today's date in ISO format for filtering
  const today = new Date()
  const todayStr = format(today, 'yyyy-MM-dd')
  
  // Get manager's department first
  const { data: managerDeptProfile, error: managerDeptProfileError } = await supabase
    .from('profiles')
    .select('department_id')
    .eq('id', user.id)
    .single()

  if (managerDeptProfileError) {
    console.error('Error fetching manager department profile:', managerDeptProfileError)
  }

  // Get the manager's full profile
  const { data: managerFullProfile, error: managerFullProfileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .single()

  if (managerFullProfileError) {
    console.error('Error fetching manager full profile:', managerFullProfileError)
  }

  // Now query for team members in the manager's department
  // Step 1: Get all user_roles in the manager's department
  const { data: departmentUserRoles, error: departmentUserRolesError } = await supabase
    .from('user_roles')
    .select('user_id, role, department_id')
    .eq('department_id', managerDeptProfile?.department_id)

  // Step 2: Get the profiles for these users
  let teamMembers = [];
  let teamMembersError = null;

  if (departmentUserRoles && departmentUserRoles.length > 0) {
    const userIds = departmentUserRoles.map(ur => ur.user_id);

    const { data: profilesData, error: profilesError } = await supabase
      .from('profiles')
      .select('id, full_name, email, role, department_id')
      .in('id', userIds);

    if (profilesError) {
      teamMembersError = profilesError;
    } else {
      // Combine the data
      teamMembers = departmentUserRoles.map(ur => {
        const profile = profilesData?.find(p => p.id === ur.user_id);
        return {
          user_id: ur.user_id,
          role: ur.role,
          department_id: ur.department_id,
          profiles: profile
        };
      });
    }
  } else if (departmentUserRolesError) {
    teamMembersError = departmentUserRolesError;
  }

  if (teamMembersError) {
    console.error('Error fetching team members:', teamMembersError)
  }

  // Extract profile data from the joined query, filtering out undefined profiles
  const employeeProfiles = teamMembers?.filter(member => member && member.profiles)
    .map(member => member.profiles) || [];

  // Combine the current user with team members, ensuring managerFullProfile is defined
  const employees = managerFullProfile ? [managerFullProfile, ...employeeProfiles] : [...employeeProfiles];

  // Get department info
  const { data: departments, error: departmentsError } = await supabase
    .from('departments')
    .select('id, name')

  if (departmentsError) {
    console.error('Error fetching departments:', departmentsError)
  }

  // Create a map of department IDs to names
  const departmentMap = new Map<string, string>()
  departments?.forEach(dept => {
    departmentMap.set(dept.id, dept.name)
  })

  // Get count of today's attendance logs
  const { count: todayLogsCount, error: logsError } = await supabase
    .from('attendance_logs')
    .select('*', { count: 'exact', head: true })
    .gte('timestamp', `${todayStr}T00:00:00`)
    .lte('timestamp', `${todayStr}T23:59:59`)

  // Filter to exclude only the current user (manager) and handle null/undefined employees
  const employeesInDepartment = employees?.filter(emp => {
    // Skip null/undefined employees and the current manager (don't include self)
    if (!emp || !emp.id) return false;
    const isSelf = emp.id === user.id;
    return !isSelf;
  }) || [];

  // Get today's attendance logs for all employees
  const { data: todayLogs, error: todayLogsError } = await supabase
    .from('attendance_logs')
    .select('id, user_id, event_type, timestamp')
    .gte('timestamp', `${todayStr}T00:00:00`)
    .lte('timestamp', `${todayStr}T23:59:59`)
    .order('timestamp', { ascending: false })

  if (todayLogsError) {
    console.error('Error fetching today logs:', todayLogsError);
  }

  // Get recent activity logs (last 20 entries) for team members
  const teamMemberIds = employeesInDepartment.map(emp => emp.id);

  let recentLogs = [];

  // Only query Supabase if we have team member IDs
  if (teamMemberIds.length > 0) {
    const { data: dbLogs, error: recentLogsError } = await supabase
      .from('attendance_logs')
      .select('id, user_id, event_type, timestamp')
      .in('user_id', teamMemberIds)
      .order('timestamp', { ascending: false })
      .limit(20);

    if (recentLogsError) {
      console.error('Error fetching recent logs:', recentLogsError);
    } else if (dbLogs) {
      recentLogs = dbLogs;
    }
  }

  // Process employee status
  const employeeStatuses: EmployeeStatus[] = [];
  const activeEmployeeIds = new Set<string>();

  if (employeesInDepartment && todayLogs) {
    // Create a map of the latest status for each employee
    const latestStatusMap = new Map<string, { status: 'signed_in' | 'signed_out' | 'on_break', timestamp: string }>();

    // Process logs to determine current status
    todayLogs.forEach(log => {
      // Skip if we already have a more recent status for this employee
      if (latestStatusMap.has(log.user_id) &&
          new Date(latestStatusMap.get(log.user_id)!.timestamp) > new Date(log.timestamp)) {
        return;
      }

      let status: 'signed_in' | 'signed_out' | 'on_break' = 'signed_out';

      if (log.event_type === 'signin') {
        status = 'signed_in';
        activeEmployeeIds.add(log.user_id);
      } else if (log.event_type === 'signout') {
        status = 'signed_out';
      } else if (log.event_type === 'break_start') {
        status = 'on_break';
        activeEmployeeIds.add(log.user_id);
      } else if (log.event_type === 'break_end') {
        status = 'signed_in';
        activeEmployeeIds.add(log.user_id);
      }

      latestStatusMap.set(log.user_id, { status, timestamp: log.timestamp });
    });

    // Create employee status objects
    employeesInDepartment.forEach(employee => {
      // Skip if employee is undefined or doesn't have an id
      if (!employee || !employee.id) return;
      
      const latestStatus = latestStatusMap.get(employee.id);

      if (latestStatus) {
        employeeStatuses.push({
          id: employee.id,
          name: employee.full_name || 'Unnamed',
          status: latestStatus.status,
          lastActivity: getActivityLabel(latestStatus.status),
          lastActivityTime: format(new Date(latestStatus.timestamp), 'h:mm a')
        });
      } else {
        employeeStatuses.push({
          id: employee.id,
          name: employee.full_name || 'Unnamed',
          status: 'signed_out',
          lastActivity: 'Not active today',
          lastActivityTime: ''
        });
      }
    });
  }

  // Sort employee statuses: active first, then by name
  employeeStatuses.sort((a, b) => {
    // Active employees first
    if (a.status !== 'signed_out' && b.status === 'signed_out') return -1;
    if (a.status === 'signed_out' && b.status !== 'signed_out') return 1;

    // Then sort by name
    return a.name.localeCompare(b.name);
  });

  const activeEmployeeCount = activeEmployeeIds.size;
  
  // Helper function to get activity label
  function getActivityLabel(status: 'signed_in' | 'signed_out' | 'on_break'): string {
    switch (status) {
      case 'signed_in': return 'Signed In';
      case 'signed_out': return 'Signed Out';
      case 'on_break': return 'On Break';
    }
  }
  
  return {
    employeeStatuses,
    employeesInDepartment,
    activeEmployeeCount,
    todayLogsCount,
    departmentMap,
    managerProfile: managerDeptProfile,
    recentLogs,
    today
  };
}

export default async function ManagerDashboard() {
  const supabase = await createClient()

  // Get user and check if they're logged in
  const { data: { user }, error } = await supabase.auth.getUser()

  if (error || !user) {
    redirect('/login')
  }
  
  // Get manager's profile
  const { data: managerProfile, error: managerProfileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .single()
    
  if (managerProfileError) {
    console.error('Error fetching manager profile:', managerProfileError)
    return <div>Error loading profile. Please try again.</div>
  }
  
  // Check if user is a manager or admin
  if (managerProfile.role !== 'manager' && managerProfile.role !== 'admin') {
    return redirect('/?message=You do not have permission to access this page.')
  }
  
  // Wrap the content in Suspense to show loading indicator
  return (
    <Suspense fallback={<div className="flex justify-center items-center min-h-screen"><LoadingSpinner size="lg" /></div>}>
      <ClientWrapper initialData={await getManagerDashboardData(supabase, user, managerProfile)} />
    </Suspense>
  );
}
